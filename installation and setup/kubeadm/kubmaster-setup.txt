1. Check if br_netfilter module is loaded: lsmod | grep br_netfilter
2. If not, then load it using: sudo modprobe br_netfilter

3. Execute below commands:
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system

4. Install docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh

5. Configure docker deamon using below commands:
sudo mkdir /etc/docker
cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

6. Restart docker and enable on boot
sudo systemctl enable docker
sudo systemctl daemon-reload
sudo systemctl restart docker

7. Install kubeadm, kubelet and kubectl
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl

sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

8. Initialize the cluster
sudo kubeadm init --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address=192.168.1.200

9. Follow the on screen instructions from the output of command from step-8.
10. Note down the kubeadm join command as it has to be run on the nodes. Do not run the command yet.

11. Now we need to setup a network. Here we are setting up WEAVE:
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

12. Now run the kubeadm join command on the nodes. Once done, got to master and run kubectl get nodes to see if the nodes are listed with status Ready.
13. Done!
14. If a node is joining the cluster after several days, then the token provided in the command to join might alrady be expired, in that case use below command to generate a fresh token:
kubeadm token create
15. Later during the use, if you ever face error like "". then first check the ip address of the master node if it has changed. If not then use below set of commands:
sudo -i
swapoff -a
exit
strace -eopenat kubectl version

16. If you face error like this "The connection to the server localhost:8080 was refused - did you specify the right host or port?", then use below commands on master to resolve it:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
